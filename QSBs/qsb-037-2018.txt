

             ---===[ Qubes Security Bulletin #37 ]===---

                          January 9, 2018


    Information leaks due to processor speculative execution bugs

Summary
========

On the night of January 3rd, two independent groups of researchers
have announced results of their months-long work into abusing modern
processors' so-called speculative mode to leak secrets from the
system's privileged memory [1][2][3][4]. As a response, the Xen
Security Team has published the Xen Security Advisory 254 [5]. The Xen
Security Team has _not_ previously shared the information about the
problems via their (non-public) security pre-disclosure list of which
Qubes Security Team is a member.

Within the limited time we have to analyze the issue, we've come to
the following conclusions about the possible practical impacts for
Qubes OS users and possible remedies. We also share a plan to address
the issues in a more systematic way in the coming weeks.

Practical impact and limiting factors for Qubes users
======================================================

## Fully virtualized VMs offer signifiant protection

The most reliable attack (Meltdown) of the three discussed cannot be
exploited _from_ a fully-virtualized VMs. In Qubes 3.x, however, by
_default_ all the VMs are para-virtualized (PV), and thus do not
protect against this attack. In Qubes 4.0, all the VMs are
fully-virtualized and thus offer protection. However, even the fully
virtualized VMs in Qubes 3.2, as well in the release candidates 1-3
for Qubes 4.0, still rely on PV-based so called "stub domain", making
it possible for the attacker who can chain another exploit for qemu to
still attempt the Meltdown attack. It does not matter whether the
target VM (i.e. the one from which the attacker wants to steal
secrets) is fully-virtualized.

## Spectre attacks seems hard

It _seems_ that at least one of the other two attacks disclosed
(codenamed "Spectre") might be significantly harder to use under Xen
than under monolithic systems, because of the significantly fewer
options for the attacker to interact with the hypervisor.

## All attacks are read-only

It's important to stress the attacks allows only to _read_ memory, but
not to modify any memory. This means the attacker cannot plant any
backdoors or otherwise compromise the system in any persistent way.
This e.g. means that, thanks to the Qubes OS template mechanism which
is used by default for all the user and system qubes (AppVMs and
ServiceVMs) a simple restart of a VM should bring it back to the good
known state for most attacks wiping out the potential attacking code
within the VM (unless the attacker found a way to put triggers within
the user's home directory -- please see [8] for more discussion).

## Only VMs running currently

Furthermore, due to Qubes OS being a memory-hungry system, it seems
the attacker would be able to only steal secrets from the VMs running
concurrently with the attacker VM. This is because any pages from the
shutdown VMs will typically very quickly get allocated to other,
running VMs, and get wiped as part of this procedure.

## GPG and other crypto keys are at risk

Nevertheless for the VMs which happen to be running concurrently with
the attacker's VM, it seems possible the attacks might allow to steal
crypto keys (e.g. email GPG private keys).

## Disk encryption and screenlocker passwords are at risk

One VM is, however, always running concurrently with other VMs, and
this is the AdminVM (dom0). This VM contains two important user secrets:

 - the disk (LUKS) encryption key (and likely passphrase)
 - the screenlocker password

In order to make use of these secrets, however, the attacker would
need to conduct a physical attack on the user's computer (e.g. steal
the laptop physically). Users should be mindful, however, in case they
re-use the same disk encryption passphrase to also encrypt their
backups.

Additional remedies available to Qubes users
=============================================

Thanks to the Qubes explicit partitioning model it should be
straightforward for users to implement an additional hygiene and
ensure that whenever less trusted VMs are running, then the highly
sensitive VMs are shutdown.

Additionally, for some of the VMs that must run anyway (e.g. network
and USB qubes), it is possible to simply-recreate the VM each time the
user suspects a situation which might have compromised it took place,
e.g. after disconnecting from the less trusted WiFi networks, or
unplugging of untrusted USB devices. On Qubes 4.0, this can be further
simplified by using the new features of Disposable VMs, which can now
be used as e.g. network or USB VMs (see [10]).

The Qubes firewalling and networking makes it also easy to limit what
networking resources specific VMs might reach (including making the
VMs offline). This might be used to limit ability of the attack to
leak secrets stolen from the memory (e.g.  using the Meltdown attack)
to the outside world. While this mechanism should not be considered
bullet-proof -- it is still possible to mount specific attack which
exploits some additional network-based covert channel to leak the data
-- it could be considered as an additional layer of defense.

Finally, Qubes offers mechanisms to allow for additional protection of
users secrets, especially keys, such as GPG keys used for encryption
and signing. Qubes Split GPG [6] allows to keep the actual keys in an
isolated VM. So, for example, the user might be running her
"development" qube in parallel with a compromised qube, while keeping
the actual GPG backend VM (where the signing key she uses to sign the
software she releases are kept) shut down most of the time (because
it's only needed when a release is being made). This way the software
signing keys will be protected from the attack.

A step further is to use Qubes Split GPG with a backend qube running
on a physically separate computer, as has been demonstrated with Qubes
USB Armory project [7].

(Proper) patching
==================

Mitigations against CPU bugs discussed here are not yet fully
developed. Xen Project team is working on appropriate patches (see XSA
254 [5] for updates), but at the same time we are working on similar
mitigations were feasible.

For Qubes 4.0, default configuration already use HVMs, which already
mitigates the most severe issue - Meltdown. The only PV domains there
are stubdomains, which we plan to eliminate by switching to PVH where
possible. This will be done in Qubes 4.0 rc4, and also released as
normal updates for already installed systems.
The only remaining PV stubdomains will be for PCI devices handling VMs
(sys-net, sys-usb in default configuration). Xen Project does not
provide (yet) any solution for this[9].

For Qubes 3.2, we plan to backport PVH support from Qubes 4.0 and
enable it for VMs without PCI devices. This will work only when the
hardware support VT-x or equivalent technology. Qubes 3.2 will remain
to work even without VT-x, but there is no mitigation against Meltdown
CPU bug for such systems. Users are advised to take this into
consideration when assessing trustworthiness of their systems.

We'll update this bulletin and issue separate announcement when
appropriate patches will be ready.

Suggested actions after patching
=================================

Even though the attacks discussed in this bulletin should be treated
with all seriousness, still the recovery from a potential useful
attack should be easier than in case of a full system compromise with
a code execution exploit. Specifically, we don't believe it is needed
to use Qubes Paranoid Backup Restore Mode to address these
vulnerabilities, because of the strict read-only character of the
attacks discussed. Instead, those users who believe they were affected
in practice might consider "only" the following actions:

    1. Change their screenlocker password
    
    2. Change their disk encryption passphrase
    
    3. Re-encrypt their disk to force also change of the disk
    encryption _key_ (in practice: reinstall Qubes and restore the VMs
    from a backup).

    4. Evaluate chances of various other secrets being compromised,
    such as other passwords and GPG/SSH/TLS private keys, and generate
    new secrets. It is unclear how easy it might be for attackers to
    steal such data in a _practical_ Qubes environment.

Technical discussion
=====================

From the (high-level) architecture point of view, the attacks
discussed in this bulletin should not concern Qubes OS much... This is
because, architecture-wise, there should be no secrets or other
sensitive data in the hypervisor memory. This is quite in contrast
compared to traditional monolithic systems, where there is an
abundance of sensitive information living in the kernel (supervisor).

Unfortunately, for rather accidental reasons, the implementation of
the very hypervisor we happen to be using to implement isolation for
Qubes, i.e. the Xen hypervisor, undermines this clean architecture due
to internally mapping the whole physical memory pages into its address
space. Of course, under normal circumstances, this isn't a security
problem, because no one is able to read the hypervisor memory. Except
the bugs we discuss today might allow to do just that. This is a great
example of how difficult it might be to analyze security impact when
limiting oneself to only one layer of abstraction, especially the
high-level one (also known as the "power point" level).

At the same time, we should point out that the use of full
virtualization prevents at least one of the attacks, and incidentally
the most powerful one, i.e. the Meltdown attack.

However, we should also point out that on Qubes 3.2 even fully
virtualized VMs (i.e. HVMs) still rely on para-virtualized (PV) stub
domains to provide them the I/O emulator (qemu). In case of an
additional vulnerability within qemu, the attacker might compromise
the PV-based stub domain and attempt to perform the Meltdown attack
from there.

The above limitation also applies to the release candidates 1-3 for
Qubes 4.0. The next release candidate we plan to release next week,
should be using PVH instead of HVM for all the AppVMs by default, thus
eliminating this avenue of attack. However, as discussed in the
Patching section, not for driver domains, meaning the Meltdown attacks
could in theory still be conducted when the attacker compromised the
driver domain AND afterwords compromised the corresponding stub domain
via a hypothetical qemu exploit. Sadly there is not much we can do
about this last part, without cooperation from the Xen project on that
matter [TODO: link].

Credits
========

See the original Xen Security Advisory.

References
===========

[1] https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html
[2] https://meltdownattack.com/
[3] https://meltdownattack.com/meltdown.pdf
[4] https://spectreattack.com/spectre.pdf
[5] https://xenbits.xen.org/xsa/advisory-254.html
[6] https://www.qubes-os.org/doc/split-gpg/
[7] https://github.com/inversepath/qubes-qrexec-to-tcp
[8] https://www.qubes-os.org/news/2017/04/26/qubes-compromise-recovery/
[9] https://lists.xenproject.org/archives/html/xen-devel/2018-01/msg00403.html
[10] https://www.qubes-os.org/news/2017/10/03/core3/

--
The Qubes Security Team
https://www.qubes-os.org/security/
